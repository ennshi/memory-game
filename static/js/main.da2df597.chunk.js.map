{"version":3,"sources":["actions/types.js","actions/index.js","components/Navbar.js","resources/selectValues.js","components/SettingsForm.js","components/Card.js","components/Timer.js","components/Board.js","components/ChampionListForm.js","resources/cookies.js","components/ChampionList.js","components/YourScore.js","components/App.js","reducers/boardReducers.js","reducers/timerReducers.js","reducers/championsReducers.js","reducers/index.js","index.js"],"names":["EXIT","exitCurrentGame","type","toggleChampionList","Navbar","className","onClick","this","props","disabled","allowCookieFromBoard","allowCookieFromForm","React","Component","connect","state","formValueSelector","selector","board","allowCookie","THEMES","animals","landmarks","leaves","waincats","SUITS","CARDS","SettingsForm","renderSelectOptions","list","selectOptions","option","push","key","value","onSubmit","formValues","initializeBoard","handleSubmit","Field","name","component","maxLength","id","htmlFor","wrappedForm","reduxForm","form","enableReinitialize","initialValues","payload","classNames","require","Card","card","cardClass","matched","opened","theme","suit","Image","src","alt","ownParams","onCardClick","Timer","timerInterval","onPause","active","unsetTimerInterval","setTimerInterval","stopTimer","clearInterval","setInterval","updateTimer","pauseClass","pause","timer","onExit","style","fontSize","prevProps","endGame","ownProps","timerActivated","Board","idx","openedCards","length","flipCard","checkMatch","idx1","idx2","matchedCards","setTimeout","cards","map","index","idxOpened","dispatch","a","ChampionListForm","suits","showOneBoardResults","boards","loadCookie","hasOwnProperty","data","cookieData","document","cookie","split","JSON","parse","unescape","setExpiresDate","today","Date","now","toUTCString","saveCookie","obj","date","Object","keys","escape","stringify","addChampionToCookie","champion","champList","newChampList","assign","sort","b","slice","clearCookies","ChampionList","champions","getChampionsFromCookies","cardsChampionList","suitsChampionList","setState","renderChampions","i","username","boardIsInit","onClearClick","isInit","YourScore","App","mainViewRender","showChampionList","gameEnded","createNewChampion","cardsLeft","filter","INIT_STATE","generateBoard","numCards","numSuits","numPairs","arr","shuffledArr","Math","random","shuffleCards","toggleOneCard","newBoard","listOpenedCards","prevList","includes","cardIdx","matchTwoCards","INIT_VALUE","combineReducers","action","formReducer","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.da2df597.chunk.js","sourcesContent":["// timer actions\r\nexport const UPDATE_TIMER = 'UPDATE_TIMER';\r\nexport const STOP_TIMER = 'STOP_TIMER';\r\n\r\n// board actions\r\nexport const INITIALIZE_BOARD = 'INITIALIZE_BOARD';\r\nexport const FLIP_CARD = 'FLIP_CARD';\r\nexport const MATCHED_CARDS = 'MATCHED_CARDS';\r\nexport const EXIT = 'EXIT';\r\nexport const GAME_ENDED = 'GAME_ENDED';\r\n\r\n// champions action\r\nexport const GET_CHAMPIONS = 'GET_CHAMPIONS';\r\nexport const TOGGLE_CHAMPLIST = 'SHOW_CHAMPLIST';\r\nexport const CLEAR_CHAMPLIST = 'CLEAR_CHAMPLIST';\r\n","import {\r\n    EXIT,\r\n    FLIP_CARD,\r\n    GAME_ENDED,\r\n    INITIALIZE_BOARD,\r\n    MATCHED_CARDS,\r\n    STOP_TIMER,\r\n    TOGGLE_CHAMPLIST,\r\n    UPDATE_TIMER\r\n} from \"./types\";\r\n\r\nexport const initializeBoard = (formValues) => {\r\n    return {\r\n        type: INITIALIZE_BOARD,\r\n        payload: formValues\r\n    }\r\n};\r\n\r\nexport const flipCard = (idx) => {\r\n    return {\r\n        type: FLIP_CARD,\r\n        payload: idx\r\n    };\r\n};\r\n\r\nexport const matchedCards = (idx1, idx2) => async (dispatch) => {\r\n    await setTimeout(() => {\r\n        dispatch({\r\n            type: MATCHED_CARDS,\r\n            payload: {idx1, idx2}\r\n        });\r\n    }, 600);\r\n};\r\n\r\nexport const stopTimer = () => {\r\n    return {\r\n        type: STOP_TIMER\r\n    };\r\n};\r\n\r\nexport const updateTimer = () => {\r\n    return {\r\n        type: UPDATE_TIMER\r\n    };\r\n};\r\n\r\nexport const exitCurrentGame = () => {\r\n    return {\r\n        type: EXIT\r\n    };\r\n};\r\n\r\nexport const toggleChampionList = () => {\r\n    return {\r\n        type: TOGGLE_CHAMPLIST\r\n    };\r\n};\r\n\r\nexport const gameEnded = () => {\r\n    return {\r\n        type: GAME_ENDED\r\n    }\r\n};\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {formValueSelector} from \"redux-form\";\r\nimport {exitCurrentGame} from \"../actions\";\r\n\r\nclass Navbar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"navbar\">\r\n                <h1 onClick={this.props.exitCurrentGame}>MEMORY_GAME</h1>\r\n                <button\r\n                    onClick={this.props.onClick}\r\n                    className=\"yellow-btn\"\r\n                    disabled={!(this.props.allowCookieFromBoard || this.props.allowCookieFromForm)}>\r\n                    <i className=\"fas fa-trophy\"></i>\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    const selector = formValueSelector('SettingsForm');\r\n    return {\r\n        allowCookieFromForm: selector(state, 'allowCookie'),\r\n        allowCookieFromBoard: state.board.allowCookie\r\n    };\r\n};\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        exitCurrentGame\r\n    })(Navbar);\r\n","const THEMES = {\r\n    animals: 'animals',\r\n    landmarks: 'landmarks',\r\n    leaves: 'leaves',\r\n    waincats: 'waincats'\r\n};\r\nconst SUITS = {\r\n    '5': '5 suits',\r\n    '10': '10 suits',\r\n    '15': '15 suits'\r\n};\r\nconst CARDS = {\r\n    '20': '20 cards',\r\n    '30': '30 cards'\r\n};\r\n\r\nexport {THEMES, CARDS, SUITS};\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {CARDS, SUITS, THEMES} from \"../resources/selectValues\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {initializeBoard} from \"../actions\";\r\n\r\nclass SettingsForm extends React.Component {\r\n    renderSelectOptions = (list) => {\r\n        const selectOptions = [];\r\n        for(const option in list) {\r\n            selectOptions.push(\r\n                <option key={option} value={option}>{list[option]}</option>\r\n            );\r\n        }\r\n        return selectOptions;\r\n    };\r\n    onSubmit = (formValues) => {\r\n        this.props.initializeBoard(formValues);\r\n    };\r\n    render() {\r\n        return (\r\n            <form className=\"form\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n                <h1 className=\"form-header\">Hello</h1>\r\n                <Field className=\"form-field\" name=\"username\" component=\"input\" maxLength=\"13\"/>\r\n                <h2 className=\"form-header\">Board</h2>\r\n                <Field className=\"form-field\" name=\"cards\" component=\"select\">\r\n                    {this.renderSelectOptions(CARDS)}\r\n                </Field>\r\n                <Field className=\"form-field\" name=\"suits\" component=\"select\">\r\n                    {this.renderSelectOptions(SUITS)}\r\n                </Field>\r\n                <Field className=\"form-field\" name=\"theme\" component=\"select\">\r\n                    {this.renderSelectOptions(THEMES)}\r\n                </Field>\r\n                <div className=\"checkbox-field\">\r\n                    <Field type=\"checkbox\" component=\"input\" name=\"allowCookie\" id=\"allowCookie\" />\r\n                    <label htmlFor=\"allowCookie\">Allow MEMORY_GAME to save and read cookie data</label>\r\n                </div>\r\n                <button type=\"submit\" className=\"submit-btn\"><i className=\"fas fa-play\"></i></button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n       initialValues: state.board\r\n    };\r\n};\r\nconst wrappedForm = reduxForm({\r\n    form: 'SettingsForm',\r\n    enableReinitialize : true\r\n})(SettingsForm);\r\nexport default connect(\r\n    mapStateToProps,\r\n    {initializeBoard}\r\n    )(wrappedForm);\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst classNames = require(\"classnames\");\r\n\r\nclass Card extends React.Component {\r\n    onClick = () => {\r\n        this.props.onClick(this.props.id);\r\n    };\r\n    render() {\r\n        const card = this.props.board[this.props.id];\r\n        const cardClass = classNames({\r\n            'card-inner': !card.matched,\r\n            'clicked': card.opened,\r\n            'not-clicked': !card.opened,\r\n            'matched': card.matched\r\n        });\r\n        return(\r\n            <div className=\"card\">\r\n                <div className={cardClass} onClick={!card.matched ? this.onClick : null}>\r\n                    <div className={card.matched ? \"card-front matched\" : \"card-front\"}>\r\n                    </div>\r\n                    <div className=\"card-back\">\r\n                        <Image theme={this.props.theme} suit={card.suit}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst Image = (props) => {\r\n    return (\r\n        <img src={`/img/${props.theme}/${props.suit}.png`} alt={`${props.theme} ${props.suit}`}/>\r\n    );\r\n};\r\nconst mapStateToProps = (state, ownParams) => {\r\n    return {\r\n        board: state.board.board,\r\n        id: ownParams.id,\r\n        theme: state.board.theme,\r\n        onClick: ownParams.onCardClick\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Card);\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {stopTimer, updateTimer} from \"../actions\";\r\nconst classNames = require('classnames');\r\n\r\nclass Timer extends React.Component {\r\n    timerInterval = null;\r\n    onPause = () => {\r\n        if(this.props.active) {\r\n            this.unsetTimerInterval();\r\n        } else {\r\n            this.setTimerInterval();\r\n        }\r\n    };\r\n    unsetTimerInterval = () => {\r\n        this.props.stopTimer();\r\n        clearInterval(this.timerInterval);\r\n        this.timerInterval = null;\r\n    };\r\n    setTimerInterval = () => {\r\n        if(!this.timerInterval) {\r\n            this.timerInterval = setInterval(() => {\r\n                this.props.updateTimer();\r\n            }, 1000);\r\n        }\r\n    };\r\n    render() {\r\n        const pauseClass = classNames({\r\n            'yellow-btn': true,\r\n            pause: !this.props.active\r\n        });\r\n        return (\r\n            <div className='timer'>\r\n                <h4 className=\"clock\">{this.props.timer}</h4>\r\n                <div className=\"btn-set\">\r\n                    <button onClick={this.onPause} className={pauseClass}><i className=\"fas fa-pause\"></i></button>\r\n                    <button onClick={this.props.onExit} className=\"yellow-btn\" style={{fontSize: '1.8rem'}}><i className=\"fas fa-times\"></i></button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.endGame) {\r\n            this.unsetTimerInterval();\r\n        }\r\n        if(this.props.active && !prevProps.active) {\r\n            this.setTimerInterval();\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.unsetTimerInterval();\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        timer: state.timer.timer,\r\n        active: state.timer.timerActivated,\r\n        onExit: ownProps.onExit,\r\n        endGame: state.board.endGame\r\n    }\r\n};\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        stopTimer,\r\n        updateTimer\r\n    }\r\n)(Timer);\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Card from \"./Card\";\r\nimport {exitCurrentGame, flipCard, matchedCards} from \"../actions\";\r\nimport Timer from \"./Timer\";\r\n\r\nclass Board extends React.Component {\r\n    onCardClick = (idx) => {\r\n        if(this.props.openedCards.length < 2) {\r\n            this.props.flipCard(idx);\r\n        }\r\n    };\r\n    onExit = () => {\r\n        this.props.exitCurrentGame();\r\n    };\r\n    checkMatch = (idx1, idx2, board) => {\r\n        if(board[idx1].suit === board[idx2].suit) {\r\n            return this.props.matchedCards(idx1, idx2);\r\n        }\r\n        setTimeout(() => {\r\n            this.props.flipCard(idx1);\r\n            this.props.flipCard(idx2);\r\n        }, 700);\r\n    };\r\n    render() {\r\n        const cards = this.props.board.map((card, index) => (\r\n            <Card\r\n                id={index}\r\n                key={index}\r\n                onCardClick={this.onCardClick}\r\n            />));\r\n        return (\r\n            <>\r\n                <Timer onExit={this.onExit}/>\r\n                <div className=\"board\">\r\n                    {cards}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n    componentDidUpdate() {\r\n        const {openedCards, board} = this.props;\r\n        if(openedCards.length === 2) {\r\n            this.checkMatch(openedCards[0], openedCards[1], board);\r\n        }\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.board.board,\r\n        openedCards: state.board.idxOpened\r\n    }\r\n};\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        flipCard,\r\n        matchedCards,\r\n        exitCurrentGame\r\n    }\r\n)(Board);\r\n","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {connect} from \"react-redux\";\r\nimport {CARDS, SUITS} from \"../resources/selectValues\";\r\n\r\nclass ChampionListForm extends React.Component {\r\n    renderSelectOptions = (list) => {\r\n        const selectOptions = [];\r\n        for(const option in list) {\r\n            selectOptions.push(\r\n                <option key={option} value={option}>{list[option]}</option>\r\n            );\r\n        }\r\n        return selectOptions;\r\n    };\r\n    render() {\r\n        return (\r\n            <form>\r\n                <Field className=\"form-field-small\" name=\"cards\" component=\"select\">\r\n                    {this.renderSelectOptions(CARDS)}\r\n                </Field>\r\n                <Field className=\"form-field-small\" name=\"suits\" component=\"select\">\r\n                    {this.renderSelectOptions(SUITS)}\r\n                </Field>\r\n            </form>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        initialValues: {\r\n            cards: state.board.cards,\r\n            suits: state.board.suits\r\n        },\r\n    }\r\n};\r\nconst wrappedForm = reduxForm({\r\n    form: 'ChampionsForm',\r\n    enableReinitialize : true\r\n})(ChampionListForm);\r\nexport default connect(mapStateToProps)(wrappedForm);\r\n","export const showOneBoardResults = (cards, suits) => {\r\n    const boards = loadCookie();\r\n    if(boards.hasOwnProperty([cards+'X'+suits])) {\r\n        return boards[cards+'X'+suits];\r\n    }\r\n    return [];\r\n};\r\nconst loadCookie = () => {\r\n    let data = {};\r\n    const cookieData = document.cookie.split(';');\r\n    if (cookieData[0]) {\r\n        data = JSON.parse(unescape(cookieData[0]));\r\n    }\r\n    return data;\r\n};\r\nconst setExpiresDate = () => {\r\n    const today = Date.now();\r\n    const nextday = new Date((today+60*60*1000*24));\r\n    return nextday.toUTCString();\r\n};\r\nconst saveCookie = (obj={}) => {\r\n    const date = (Object.keys(obj).length === 0) ? new Date(2010, 1, 10).toUTCString()\r\n        : setExpiresDate();\r\n    document.cookie = escape(JSON.stringify(obj))\r\n        + ';expires=' + date;\r\n};\r\nconst sortListAndTake5Top = (list) => {\r\n    const sortedArray = [...list].sort((a,b) => a.timer - b.timer);\r\n    return sortedArray.slice(0, 4);\r\n};\r\nexport const addChampionToCookie = (champion) => {\r\n    const { cards, suits } = champion;\r\n    let champList = loadCookie();\r\n    let newChampList = {};\r\n    if(!champList) {\r\n        newChampList[cards+'X'+suits] = [champion];\r\n    } else {\r\n        Object.assign(newChampList, champList);\r\n        if(newChampList.hasOwnProperty([cards+'X'+suits])) {\r\n            newChampList[cards+'X'+suits].push(champion);\r\n            newChampList[cards+'X'+suits] = sortListAndTake5Top(newChampList[cards+'X'+suits]);\r\n        } else {\r\n            newChampList[cards+'X'+suits] = [champion];\r\n        }\r\n    }\r\n    saveCookie(newChampList);\r\n};\r\n\r\nexport const clearCookies = () => {\r\n    saveCookie();\r\n};\r\n","import React from \"react\";\r\nimport \"../css/ChampionList.css\";\r\nimport ChampionListForm from \"./ChampionListForm\";\r\nimport {formValueSelector} from \"redux-form\";\r\nimport {connect} from \"react-redux\";\r\nimport {clearCookies, showOneBoardResults} from \"../resources/cookies\";\r\nimport {exitCurrentGame, toggleChampionList} from \"../actions\";\r\n\r\nclass ChampionList extends React.Component {\r\n    state = {\r\n        champions: []\r\n    };\r\n    getChampionsFromCookies = () => {\r\n        const {cardsChampionList, suitsChampionList} = this.props;\r\n        this.setState({champions: showOneBoardResults(cardsChampionList, suitsChampionList)});\r\n    };\r\n    renderChampions = () => {\r\n        return this.state.champions.map((champion, i) => {\r\n            return (\r\n                <div key={i} className=\"champion\">\r\n                    <span>{(i + 1) + '. '}</span>\r\n                    <span>{champion.username}</span>\r\n                    <span>{champion.timer}</span>\r\n                </div>);\r\n        });\r\n    };\r\n    onExit = () => {\r\n        if(!this.props.boardIsInit) {\r\n            this.props.exitCurrentGame();\r\n        } else {\r\n            this.props.toggleChampionList();\r\n        }\r\n\r\n    };\r\n    onClearClick = () => {\r\n        clearCookies();\r\n        this.onExit();\r\n    };\r\n    componentDidMount() {\r\n        this.getChampionsFromCookies();\r\n    };\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.cardsChampionList !== this.props.cardsChampionList ||\r\n            prevProps.suitsChampionList !== this.props.suitsChampionList) {\r\n            this.getChampionsFromCookies();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"champion-header-container\">\r\n                    <h1>Best Score</h1>\r\n                    <button onClick={this.onExit} className=\"yellow-btn\" style={{fontSize: '1.8rem'}}><i className=\"fas fa-times\"></i></button>\r\n                </div>\r\n                <div className=\"champion-list-wrapper\">\r\n                    <ChampionListForm />\r\n                    {this.renderChampions()}\r\n                    <button className=\"btn\"\r\n                            onClick={this.onClearClick}\r\n                            disabled={this.state.champions.length === 0}>Clear\r\n                    </button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    const selector = formValueSelector('ChampionsForm');\r\n    return {\r\n        cardsChampionList: selector(state, 'cards'),\r\n        suitsChampionList: selector(state, 'suits'),\r\n        boardIsInit: state.board.isInit\r\n    }\r\n};\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        exitCurrentGame,\r\n        toggleChampionList\r\n    })(ChampionList);\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {exitCurrentGame, toggleChampionList} from \"../actions\";\r\nimport \"../css/YourScore.css\";\r\n\r\nclass YourScore extends React.Component {\r\n    onClick = () => {\r\n        this.props.exitCurrentGame();\r\n        if(this.props.allowCookie) {\r\n            this.props.toggleChampionList();\r\n        }\r\n    };\r\n    render() {\r\n       return (\r\n           <div className=\"your-score-wrapper\">\r\n               <h1>Your score</h1>\r\n               <p>{this.props.timer}</p>\r\n               <button className=\"btn\" onClick={this.onClick}>OK</button>\r\n           </div>\r\n       );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        timer: state.timer.timer,\r\n        allowCookie: state.board.allowCookie\r\n    }\r\n};\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        toggleChampionList,\r\n        exitCurrentGame\r\n    })(YourScore);\r\n","import React from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport \"../css/App.css\";\r\nimport SettingsForm from \"./SettingsForm\";\r\nimport {connect} from \"react-redux\";\r\nimport Board from \"./Board\";\r\nimport ChampionList from \"./ChampionList\";\r\nimport {gameEnded, toggleChampionList} from \"../actions\";\r\nimport {addChampionToCookie} from \"../resources/cookies\";\r\nimport YourScore from \"./YourScore\";\r\n\r\nclass App extends React.Component {\r\n    mainViewRender = () => {\r\n        if(this.props.showChampionList) {\r\n            return <ChampionList />\r\n        }\r\n        if (this.props.boardIsInit) {\r\n            return <Board />\r\n        }\r\n        if (this.props.endGame) {\r\n            return <YourScore />\r\n        }\r\n        return <SettingsForm />;\r\n    };\r\n    endGame = () => {\r\n            this.props.gameEnded();\r\n            if(this.props.allowCookie) {\r\n                const champion = this.createNewChampion();\r\n                addChampionToCookie(champion);\r\n            }\r\n    };\r\n    createNewChampion = () => {\r\n        const {cards, suits, username, timer} = this.props;\r\n        return {\r\n            cards,\r\n            suits,\r\n            username,\r\n            timer\r\n        };\r\n    };\r\n    componentDidUpdate() {\r\n        if(!this.props.endGame && !this.props.cardsLeft.length && this.props.boardIsInit) {\r\n            this.endGame();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Navbar onClick={this.props.toggleChampionList} />\r\n                {this.mainViewRender()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        boardIsInit: state.board.isInit,\r\n        showChampionList: state.champions.showChampionList,\r\n        cardsLeft: state.board.board.filter(card => !card.matched),\r\n        cards: state.board.cards,\r\n        suits: state.board.suits,\r\n        username: state.board.username,\r\n        timer: state.timer.timer,\r\n        endGame: state.board.endGame,\r\n        allowCookie: state.board.allowCookie\r\n    }\r\n};\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        toggleChampionList,\r\n        gameEnded\r\n    }\r\n)(App);\r\n","import {EXIT, FLIP_CARD, GAME_ENDED, INITIALIZE_BOARD, MATCHED_CARDS} from \"../actions/types\";\r\n\r\nconst INIT_STATE = {\r\n    username: 'username_',\r\n    isInit: false,\r\n    idxOpened: [],\r\n    board: [],\r\n    cards: 20,\r\n    suits: 5,\r\n    theme: 'animals',\r\n    endGame: false\r\n};\r\n\r\nexport default (state=INIT_STATE, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZE_BOARD:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                board: generateBoard(action.payload.cards, action.payload.suits),\r\n                isInit: true\r\n            };\r\n        case FLIP_CARD:\r\n            return {\r\n                ...state,\r\n                board: toggleOneCard(state.board, action.payload),\r\n                idxOpened: listOpenedCards(state.idxOpened, action.payload)\r\n            };\r\n        case MATCHED_CARDS:\r\n            return {\r\n                ...state,\r\n                board: matchTwoCards(state.board, action.payload),\r\n                idxOpened: []\r\n            };\r\n        case GAME_ENDED:\r\n            return {\r\n                ...state,\r\n                isInit: false,\r\n                endGame: true\r\n            };\r\n        case EXIT:\r\n            return INIT_STATE;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst shuffleCards = (arr) => {\r\n    let shuffledArr = [...arr];\r\n    shuffledArr.sort(() => Math.random() - 0.5);\r\n    shuffledArr.sort(() => Math.random() - 0.5);\r\n    shuffledArr.sort(() => Math.random() - 0.5);\r\n    return shuffledArr;\r\n};\r\n\r\nconst generateBoard = (numCards, numSuits) => {\r\n    const board = [];\r\n    let suit = 0;\r\n    let numPairs = numCards/2;\r\n    while(numPairs > 0) {\r\n        let card = {\r\n            opened: false,\r\n            matched: false\r\n        };\r\n        if(suit >= numSuits) {\r\n            suit = 0;\r\n        }\r\n        card.suit = suit;\r\n        suit++;\r\n        board.push(card, Object.assign({}, card));\r\n        numPairs--;\r\n    }\r\n    return shuffleCards(board);\r\n};\r\n\r\nconst toggleOneCard = (board, idx) => {\r\n    const newBoard = [...board];\r\n    newBoard[idx].opened = !board[idx].opened;\r\n    return newBoard;\r\n};\r\n\r\nconst listOpenedCards = (prevList, idx) => {\r\n    if(prevList.includes(idx)) {\r\n       return prevList.filter(cardIdx => cardIdx !== idx);\r\n    }\r\n    return [...prevList, idx];\r\n};\r\n\r\nconst matchTwoCards = (board, {idx1, idx2}) => {\r\n    const newBoard = [...board];\r\n    newBoard[idx1].matched = newBoard[idx2].matched = true;\r\n    newBoard[idx1].opened = newBoard[idx2].opened = false;\r\n    return newBoard;\r\n};\r\n","import {EXIT, FLIP_CARD, STOP_TIMER, UPDATE_TIMER} from \"../actions/types\";\r\n\r\nconst INIT_STATE = {\r\n    timerActivated: false,\r\n    timer: 0\r\n};\r\n\r\nexport default (state=INIT_STATE, action) => {\r\n    switch (action.type) {\r\n        case FLIP_CARD:\r\n            return {\r\n                ...state,\r\n                timerActivated: true\r\n            };\r\n        case STOP_TIMER:\r\n            return {\r\n                ...state,\r\n                timerActivated: false\r\n            };\r\n        case UPDATE_TIMER:\r\n            return {\r\n                ...state,\r\n                timerActivated: true,\r\n                timer: (state.timer + 1)\r\n            };\r\n        case EXIT:\r\n            return INIT_STATE;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {EXIT, GAME_ENDED, TOGGLE_CHAMPLIST} from \"../actions/types\";\r\n\r\nconst INIT_VALUE = {\r\n    showChampionList: false\r\n};\r\nexport default (state=INIT_VALUE, action) => {\r\n    switch (action.type) {\r\n        case TOGGLE_CHAMPLIST:\r\n            return {\r\n                ...state,\r\n                showChampionList: !state.showChampionList\r\n            };\r\n        case EXIT:\r\n            return INIT_VALUE;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {combineReducers} from \"redux\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport boardReducers from \"./boardReducers\";\r\nimport timerReducers from \"./timerReducers\";\r\nimport championsReducers from \"./championsReducers\";\r\n\r\nexport default combineReducers({\r\n    board: boardReducers,\r\n    timer: timerReducers,\r\n    champions: championsReducers,\r\n    form: formReducer\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {applyMiddleware, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport App from \"./components/App\";\r\nimport reducers from \"./reducers\";\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}